package com.payphi.visitorsregister;

import android.annotation.TargetApi;
import android.app.ActivityManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Vibrator;
import android.support.annotation.NonNull;
import android.support.design.widget.NavigationView;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.CardView;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.EventListener;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreException;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.iid.FirebaseInstanceId;
import com.google.gson.Gson;
import com.payphi.visitorsregister.Assistant.Conversation;
import com.payphi.visitorsregister.Auth.AuthActivity;
import com.payphi.visitorsregister.Beakon.BeaconActivity;
import com.payphi.visitorsregister.Vendor.VendorActivity;
import com.payphi.visitorsregister.adapters.NewsBoardAdpter;
import com.payphi.visitorsregister.adapters.RecyclerViewAdapter;
import com.payphi.visitorsregister.model.User;
import com.payphi.visitorsregister.model.Visitor;
import com.payphi.visitorsregister.utils.ClearData;
import com.payphi.visitorsregister.utils.DetectionActivity;
import com.payphi.visitorsregister.utils.ShakeListener;
import com.payphi.visitorsregister.utils.SharedPrefManager;
import com.squareup.picasso.Picasso;

import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import de.hdodenhof.circleimageview.CircleImageView;

import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
import static android.Manifest.permission.ACCESS_FINE_LOCATION;
import static android.Manifest.permission.CALL_PHONE;
import static android.Manifest.permission.CAMERA;
import static android.Manifest.permission.READ_CONTACTS;
import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
import static android.Manifest.permission.READ_PHONE_STATE;
import static android.Manifest.permission.RECORD_AUDIO;
import static android.Manifest.permission.SEND_SMS;
import static android.Manifest.permission.VIBRATE;
import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;

public class HomeDashboard extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {
    private static final String TAG = "MainActivity";
    private ArrayList<String> permissionsToRequest;
    private ArrayList<String> permissionsRejected = new ArrayList<>();
    private ArrayList<String> permissions = new ArrayList<>();
    private Toolbar toolbar;
    private final static int ALL_PERMISSIONS_RESULT = 101;
    LocationTrack locationTrack;
    private NavigationView navigationView;
    private DrawerLayout drawerLayout;
    ImageView backhead;
    //vars
    private ArrayList<String> mNames = new ArrayList<>();
    private ArrayList<String> mImageUrls = new ArrayList<>();
    public final static String AUTH_KEY_FCM = "AIzaSyB28LSaN0BW-iUbQw27ek0fHb4g2yLlaAs";
    public final static String API_URL_FCM = "https://fcm.googleapis.com/fcm/send";
    private ArrayList<String> mNamesexpected = new ArrayList<>();
    private ArrayList<String> mImageUrlsexpected = new ArrayList<>();//
    private ArrayList<String> noticeText = new ArrayList<>();
    Animation shake;
    String deviceId = "";
    Date d1;
    Date d2;

    ArrayList<String> deviceIds = new ArrayList<String>();
    FirebaseFirestore db = FirebaseFirestore.getInstance();
    CollectionReference docRef = db.collection("Bookings");
    //  SharedPreferences sharedPreferences ;
    String name = "";
    int count = 0;
    String sound;
    boolean shkonlyonce = false;
    TextView pendinCount, nameView, emailView;
    CardView cardView, bookinCard;
    String PREF_NAME = "sosessionPref";
    int PRIVATE_MODE = 0;
    String socityCode = "";
    SharedPreferences sharedPreferences;
    SharedPrefManager sharedPrefManager;
    private CircleImageView mProfileImageView;
    Context mContext = this;
    private User user;
    LinearLayout visitornew;
    private List<Visitor> visitorsList;
    public static int docSize;
    LinearLayout linearLayout;
    RecyclerViewAdapter homeadapter, homeadapterexpected;
    NewsBoardAdpter newsBoardAdpter;
    ImageView notificationicon, sendalertimage;
    private TextView tv;
    ShakeListener mShaker;
    public static int shakecount = 0;
    String currentLoction = "";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_activity_drawer);
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        mContext = this;
        permissions.add(ACCESS_FINE_LOCATION);
        permissions.add(ACCESS_COARSE_LOCATION);
        permissions.add(RECORD_AUDIO);
        permissions.add(WRITE_EXTERNAL_STORAGE);
        permissions.add(READ_EXTERNAL_STORAGE);
        permissions.add(CAMERA);
        permissions.add(VIBRATE);
        permissions.add(SEND_SMS);
        permissions.add(CALL_PHONE);
        permissions.add(READ_PHONE_STATE);
        permissions.add(READ_CONTACTS);
        permissions.add(STORAGE_SERVICE);





        permissionsToRequest = findUnAskedPermissions(permissions);
        //getImages();
        //cardView =(CardView) findViewById(R.id.pendingReqcardId);
        shake = AnimationUtils.loadAnimation(this, R.anim.shakeanim);
//        bookinCard = (CardView) findViewById(R.id.bookingcardId);
        visitornew = (LinearLayout) findViewById(R.id.bookingcardId);
        notificationicon = (ImageView) findViewById(R.id.notificatioimageId);
        sendalertimage = (ImageView) findViewById(R.id.securityimageId);
        deviceId = FirebaseInstanceId.getInstance().getToken();
        System.out.println("Shop device Id=" + deviceId);
        linearLayout = (LinearLayout) findViewById(R.id.homelayoutId);
        // pendinCount = (TextView) findViewById(R.id.pendingtextId);
        nameView = (TextView) findViewById(R.id.nameId);
        emailView = (TextView) findViewById(R.id.emailId);
        sharedPreferences = getApplicationContext().getSharedPreferences(PREF_NAME, PRIVATE_MODE);
        tv = (TextView) this.findViewById(R.id.badge_notification_4);
        tv.setSelected(true);  // Set focus to the textview

        sharedPrefManager = new SharedPrefManager(mContext);
        socityCode = sharedPreferences.getString("SOC_CODE", null);
        name = sharedPreferences.getString("NAME", null);

        //  String uri = sharedPrefManager.getPhoto();
        emailView.setText(sharedPrefManager.getUserEmail());
       /* Uri mPhotoUri = Uri.parse(uri);
        Picasso.with(mContext)
                .load(mPhotoUri)
                .placeholder(android.R.drawable.sym_def_app_icon)
                .error(R.drawable.customerpic)
                .into(mProfileImageView);*/
        System.out.println("Name===" + name);
        nameView.setText(name);

        notificationicon.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(HomeDashboard.this, ActivityDrawer.class);
                startActivity(intent);
            }
        });

        initNavigationDrawer();
        GetUserData();
        ShakeNotification();
        TempStoreDeviceId();

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (permissionsToRequest.size() > 0)
                requestPermissions(permissionsToRequest.toArray(new String[permissionsToRequest.size()]), ALL_PERMISSIONS_RESULT);
        }
//        TestViewPager();
//        getImages();
        //UpdateDeviceId();
        //    initilizeShake();

        sendalertimage.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View view) {
                sound = "android.resource://" + getPackageName() + "/raw/alertsound";
                openDialogBox();
                return true;
            }
        });
    }

    private void MarkOnline() {
        DocumentReference bookingref = FirebaseFirestore.getInstance().collection(socityCode).document("UserDoc").collection("Sousers").document(user.getDocId());
        bookingref.update("Online", "Yes").addOnCompleteListener(new OnCompleteListener<Void>() {
            @Override
            public void onComplete(@NonNull Task<Void> task) {
                System.out.println("User is online..");
            }
        });
    }

    private void TempStoreDeviceId() {

        SharedPreferences.Editor editor = sharedPreferences.edit();
        Gson gson = new Gson();
        deviceIds.add("fHKybXtc3Y8:APA91bHHpwv0k0ucl25SFitqteiI-e1540kBXkMED-a4WHfY18ymaSHI6bda6OU9kcC0qKaBIWjYWuteJkjEaGl71t6BjHBaAED3NQv-HbvHI9KPwzUu4OjNbNL0S7tga1l9Hj1itZjSA0PDsbf0IjqlA0ceu45Agw");
        //deviceIds.add("c43fQNJ-AGY:APA91bEvkJpGYrb-MCH0yfZ0YSs_OJAPnQyfsy2IAKvFoiva4cXXP1L5nXzjxV9sDAv5qUQgiXE6ieVckop0XCUu3VGpzHZNWU_OjxFhdN0qBUxwmIagemO7ekySOrBpmLcqKTdpsdO4");
        //deviceIds.add("cfiHyIcSTQM:APA91bGg36G7uHxP3UglApk3vJoKW49zG8P4KtleW_f6_8FhIBf9WFQg4_6CNEUwVY5xfz8sNDUwO4zA07qoxAJndaHIoUdw37gJOtTmKE5JNMwQgoyawC52u4LYV9k6BKxXRiKgYxFZ");
        String json = gson.toJson(deviceIds);
        editor.putString("PrefDeviceId", json);
        editor.commit();

    }

  /*  private void TestViewPager() {
        UltraViewPager ultraViewPager = (UltraViewPager)findViewById(R.id.ultra_viewpager);
        ultraViewPager.setScrollMode(UltraViewPager.ScrollMode.HORIZONTAL);
//initialize UltraPagerAdapter，and add child view to UltraViewPager
        PagerAdapter adapter = new UltraViewPagerAdapter(homeadapter);
        ultraViewPager.setAdapter(adapter);

//initialize built-in indicator
        ultraViewPager.initIndicator();
//set style of indicators
        ultraViewPager.getIndicator()
                .setOrientation(UltraViewPager.Orientation.HORIZONTAL)
                .setFocusColor(Color.GREEN)
                .setNormalColor(Color.WHITE)
                .setRadius((int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, getResources().getDisplayMetrics()));
//set the alignment
        ultraViewPager.getIndicator().setGravity(Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM);
//construct built-in indicator, and add it to  UltraViewPager
        ultraViewPager.getIndicator().build();

//set an infinite loop
        ultraViewPager.setInfiniteLoop(true);
//enable auto-scroll mode
        ultraViewPager.setAutoScroll(2000);

    }*/

    private void initilizeShake() {
        final Vibrator vibe = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);

        mShaker = new ShakeListener(this);


        mShaker.setOnShakeListener(new ShakeListener.OnShakeListener() {
            public void onShake() {
                vibe.vibrate(200);
               /* new AlertDialog.Builder(MainActivity.this)
                        .setPositiveButton(android.R.string.ok, null)
                        .setMessage("Shooken!")
                        .show();*/
                shakecount = shakecount + 1;
                if (shakecount == 3) {

                    shakecount = 0;
                }

            }
        });
    }

    public void initNavigationDrawer() {
        drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);
        ImageView navId = (ImageView) findViewById(R.id.opendraweerId);
        View hView = navigationView.getHeaderView(0);

        mProfileImageView = (CircleImageView) hView.findViewById(R.id.headerprofileImage);
        TextView headerName = (TextView) hView.findViewById(R.id.HeadernameId);
        backhead = (ImageView) hView.findViewById(R.id.headerfaintimageid);
        //headerfaintimageid

        Menu menu = navigationView.getMenu();
        MenuItem menuItem = navigationView.getMenu().getItem(2);
        menuItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem menuItem) {
                Toast.makeText(getApplicationContext(), "on menu clck...", Toast.LENGTH_SHORT).show();
                return true;
            }
        });
        SharedPreferences.Editor prefsEditor = sharedPreferences.edit();
        Gson gson = new Gson();
        String json = sharedPreferences.getString("UserObj", "");
        user = gson.fromJson(json, User.class);
        if (user == null) {
            headerName.setText(sharedPrefManager.getName());
        } else {
            headerName.setText(user.getFullName());
        }

        navId.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                drawerLayout.openDrawer(Gravity.LEFT, true);
            }
        });

        //set up navigation drawer
        //drawerLayout = (DrawerLayout) findViewById(R.id.drawer);

        ActionBarDrawerToggle actionBarDrawerToggle = new ActionBarDrawerToggle(this, drawerLayout, null, R.string.drawer_open, R.string.drawer_close) {
            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
            }

            @Override
            public void onDrawerOpened(View drawerView) {
                super.onDrawerOpened(drawerView);
            }
        };
        drawerLayout.addDrawerListener(actionBarDrawerToggle);
        actionBarDrawerToggle.syncState();
    }
    private void openDialogBox() {

        if (user.getRole().equals("S")) {
            TakeAllDeviceId();
        } else {
            //GetCurrentLocationLT();
            GetCurrentLocation();
            System.out.println("Current location in dashboard="+currentLoction);
            Gson gson = new Gson();
            String json = sharedPreferences.getString("PrefDeviceId", null);
            //   Proxy.Type type = new TypeToken<ArrayList<ArrayObject>>() {}.getType();
            ArrayList<String> arrayList = gson.fromJson(json, ArrayList.class);
            for (int i = 0; i < arrayList.size(); i++) {
                String deviceId = arrayList.get(i);
                TakePrefDeviceId(deviceId);
            }


        }


    }

    private void GetCurrentLocation() {
        GPSTracker gps;
        gps = new GPSTracker(HomeDashboard.this);
        if (gps.canGetLocation()) {
            DatabaseReference childRef;
            DatabaseReference listRef;
            final double latitude = gps.getLatitude();
            final double longitude = gps.getLongitude();

            currentLoction = Double.toString(latitude)+","+Double.toString(longitude);


        }
    }

    private void GetCurrentLocationLT() {
        locationTrack = new LocationTrack(HomeDashboard.this);
        if (locationTrack.canGetLocation()) {
            double longitude = locationTrack.getLongitude();
            double latitude = locationTrack.getLatitude();
            //     Toast.makeText(getApplicationContext(), "Longitude:" + Double.toString(longitude) + "\nLatitude:" + Double.toString(latitude), Toast.LENGTH_SHORT).show();
            currentLoction = Double.toString(latitude)+","+Double.toString(longitude);

        } else {
            locationTrack.showSettingsAlert();
        }
    }

    private void TakePrefDeviceId(String deviceId) {
        myAsyncTask myAsyncTask = (HomeDashboard.myAsyncTask) new myAsyncTask().execute(deviceId);
    }


   private void TakeAllDeviceId() {
        FirebaseFirestore db = FirebaseFirestore.getInstance();
        CollectionReference docRef = db.collection(socityCode).document("UserDoc").collection("Sousers");

        docRef.addSnapshotListener(new EventListener<QuerySnapshot>() {
            //   docRef.addOnCompleteListener(getActivity(),new EventListener<QuerySnapshot>() {
            @Override
            public void onEvent(QuerySnapshot documentSnapshots, FirebaseFirestoreException e) {
                int size = documentSnapshots.getDocuments().size();
                System.out.println("Documents notification size=" + size);
                for (DocumentSnapshot documentSnapshot : documentSnapshots.getDocuments()) {
                    //System.out.println("Documents data==="+documentSnapshot.getData().toString());
                    SendNotification(documentSnapshot);
                }
            }
        });


    }

    private void SendNotification(DocumentSnapshot snapshot) {
        deviceId = snapshot.getString("DeviceId");
        myAsyncTask myAsyncTask = (HomeDashboard.myAsyncTask) new myAsyncTask().execute(deviceId);
    }

    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        int id = item.getItemId();
        switch (id) {
            case R.id.HomeId:
                //  signOut();
                drawerLayout.closeDrawers();
                break;
            case R.id.logoutid:
                //Toast.makeText(HomeDashboard.this, "Log out..", Toast.LENGTH_SHORT).show();
                //  FirebaseAuth.getInstance().signOut();
                SharedPreferences.Editor editor;
                editor = sharedPreferences.edit();
                //editor.putBoolean("IS_LOGGED_IN",false);
                editor.clear();
                editor.commit();
                //clearAppData();

                drawerLayout.closeDrawers();
                Intent intent = new Intent(this, AuthActivity.class);
                startActivity(intent);
                //AuthActivity.getGoogleSignOut();
                ClearData.getInstance().clearApplicationData();
                finish();

                break;
              /*         case R.id.freebieId:
                           Toast.makeText(MapActivity.this,"Home",Toast.LENGTH_SHORT).show();
                           drawerLayout.closeDrawers();
                          *//* Intent intent = new Intent(MapActivity.this, MapActivity.class);
                           startActivity(intent);*//*
                           break;
                       case R.id.paymentId:
                           Toast.makeText(MapActivity.this,"Settings",Toast.LENGTH_SHORT).show();
                           drawerLayout.closeDrawers();
                          *//* Intent intent2 = new Intent(MapActivity.this, MapActivity.class);
                           startActivity(intent2);*//*
                           break;
                       case R.id.tripId:
                           Toast.makeText(MapActivity.this,"Trash",Toast.LENGTH_SHORT).show();
                           drawerLayout.closeDrawers();
                           break;

                       case R.id.tipsId:
                           Toast.makeText(MapActivity.this,"Trash",Toast.LENGTH_SHORT).show();
                           drawerLayout.closeDrawers();
                           break;*/
        }
        return true;
    }

    private void clearAppData() {
        try {
            // clearing app data
            if (Build.VERSION_CODES.KITKAT <= Build.VERSION.SDK_INT) {
                ((ActivityManager) getSystemService(ACTIVITY_SERVICE)).clearApplicationUserData(); // note: it has a return value!
            } else {
                String packageName = getApplicationContext().getPackageName();
                Runtime runtime = Runtime.getRuntime();
                runtime.exec("pm clear " + packageName);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private class myAsyncTask extends AsyncTask<String, Void, Void> {

        @Override
        protected Void doInBackground(String... pParams) {
            String deviceId = pParams[0];
            System.out.println("Sending to DeviceId=" + deviceId);

            //
            String authKey = AUTH_KEY_FCM; // You FCM AUTH key
            String FMCurl = API_URL_FCM;
            try {
                URL url = new URL(FMCurl);
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();

                conn.setUseCaches(false);
                conn.setDoInput(true);
                conn.setDoOutput(true);

                conn.setRequestMethod("POST");
                conn.setRequestProperty("Authorization", "key=" + authKey);
                conn.setRequestProperty("Content-Type", "application/json");

                JSONObject json = new JSONObject();
                json.put("to", deviceId.trim());
                JSONObject payload = new JSONObject();
                JSONObject info = new JSONObject();
                info.put("title", "Alert "); // Notification title
                info.put("sound", sound);

                if (user.getRole().equals("S")) {
                    info.put("body", ",Security Guard has raised an alert please contact guard immediately."); // Notification body
                } else if (user.getRole().equals("R")) {
                    info.put("body", "I am " + user.getFullName() + " from flat No " + user.getFlatNo() + " need help please tap to see my current location"); // Notification body
                    info.put("location", currentLoction);
                }

                //  info.put("docId","");
                info.put("Scode", socityCode);
                //payload.put("payloaddata",info);
                json.put("data", info);
                // json.put("notification", info);


                OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                wr.write(json.toString());
                wr.flush();
                conn.getInputStream();

            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
    }

    private void getImages() {
      /*  Log.d(TAG, "initImageBitmaps: preparing bitmaps.");

        mImageUrls.add("https://c1.staticflickr.com/5/4636/25316407448_de5fbf183d_o.jpg");
        mNames.add("Havasu Falls");

        mImageUrls.add("https://i.redd.it/tpsnoz5bzo501.jpg");
        mNames.add("Trondheim");

        mImageUrls.add("https://i.redd.it/qn7f9oqu7o501.jpg");
        mNames.add("Portugal");

        mImageUrls.add("https://i.redd.it/j6myfqglup501.jpg");
        mNames.add("Rocky Mountain National Park");


        mImageUrls.add("https://i.redd.it/0h2gm1ix6p501.jpg");
        mNames.add("Mahahual");

        mImageUrls.add("https://i.redd.it/k98uzl68eh501.jpg");
        mNames.add("Frozen Lake");


        mImageUrls.add("https://i.redd.it/glin0nwndo501.jpg");
        mNames.add("White Sands Desert");

        mImageUrls.add("https://i.redd.it/obx4zydshg601.jpg");
        mNames.add("Austrailia");

        mImageUrls.add("https://i.imgur.com/ZcLLrkY.jpg");
        mNames.add("Washington");
*/
        initRecyclerView();


    }

    private void ShakeNotification() {
        shkonlyonce = true;


        new Thread() {
            public void run() {

                try {
                    runOnUiThread(new Runnable() {

                        @Override
                        public void run() {
                           /* if(chat_conversation.getParent()!=null)
                                ((ViewGroup)chat_conversation.getParent()).removeView(chat_conversation); // <- fix
                            chatlout.addView(chat_conversation);*/
                            tv.startAnimation(shake);
                            // notificationicon.startAnimation(shake);
                        }
                    });
                    // Thread.sleep(300);
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        }.start();

    }

    private void initRecyclerView() {
        Log.d(TAG, "initRecyclerView: init recyclerview");

        LinearLayoutManager layoutManager = new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false);
        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recyclerView);
        recyclerView.setLayoutManager(layoutManager);
        homeadapter = new RecyclerViewAdapter(this, mNames, mImageUrls);
        recyclerView.setAdapter(homeadapter);

        LinearLayoutManager layoutManagerexpected = new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false);
        RecyclerView recyclerViewexpected = (RecyclerView) findViewById(R.id.recyclerViewexpected);
        recyclerViewexpected.setLayoutManager(layoutManagerexpected);
        homeadapterexpected = new RecyclerViewAdapter(this, mNamesexpected, mImageUrlsexpected);
        recyclerViewexpected.setAdapter(homeadapterexpected);

//recyclerViewboard
        LinearLayoutManager layoutManagerboard = new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false);
        RecyclerView recyclerViewboard = (RecyclerView) findViewById(R.id.recyclerViewboard);
        recyclerViewboard.setLayoutManager(layoutManagerboard);
        newsBoardAdpter = new NewsBoardAdpter(this, noticeText, mImageUrlsexpected);
        recyclerViewboard.setAdapter(newsBoardAdpter);


    }

    private void LoadVisitorsList() {
        CollectionReference docRef = db.collection(socityCode).document("Visitors").collection("SVisitors");
        if (user.getRole().equals("R")) {
            docRef.whereEqualTo("FlatNumber", user.getFlatNo()).addSnapshotListener(new EventListener<QuerySnapshot>() {
                //   docRef.addOnCompleteListener(getActivity(),new EventListener<QuerySnapshot>() {
                @Override
                public void onEvent(QuerySnapshot documentSnapshots, FirebaseFirestoreException e) {
                    int size = documentSnapshots.getDocuments().size();
                    docSize = size;
                    System.out.println("Documents size====" + size);
                    //System.out.println("bookingsList size="+visitorsList.size());

                    if (mImageUrls.size() > 0 && mNames.size() > 0) {
                        mImageUrls.removeAll(mImageUrls);
                        mNames.removeAll(mNames);
                       /* adapter = new BookingAdapter(getApplicationContext(),bookingsList);
                       adapter.notifyDataSetChanged();
*/
                    }
                    if (size == 0) {
                        mImageUrls.removeAll(mImageUrls);
                        mNames.removeAll(mNames);
                        homeadapter.notifyDataSetChanged();
                    }

                    if (mImageUrlsexpected.size() > 0 && mNamesexpected.size() > 0) {
                        mImageUrlsexpected.removeAll(mImageUrlsexpected);
                        mNamesexpected.removeAll(mNamesexpected);
                       /* adapter = new BookingAdapter(getApplicationContext(),bookingsList);
                       adapter.notifyDataSetChanged();
*/
                    }
                    if (size == 0) {
                        mImageUrlsexpected.removeAll(mImageUrlsexpected);
                        mNamesexpected.removeAll(mNamesexpected);
                        homeadapterexpected.notifyDataSetChanged();

                    }

                    for (DocumentSnapshot documentSnapshot : documentSnapshots.getDocuments()) {
                        //  System.out.println("Documents data==="+documentSnapshot.getData().toString());
                        CreateVisitorsList(documentSnapshot);
                    }
                }
            });
        } else if (user.getRole().equals("S")) {
            DateFormat onlydate = new SimpleDateFormat("dd-MM-yyyy");
            Date date = new Date();
            String compdate = String.valueOf(onlydate.format(date));
            docRef.whereEqualTo("Date", compdate).addSnapshotListener(new EventListener<QuerySnapshot>() {
                //   docRef.addOnCompleteListener(getActivity(),new EventListener<QuerySnapshot>() {
                @Override
                public void onEvent(QuerySnapshot documentSnapshots, FirebaseFirestoreException e) {
                    int size = documentSnapshots.getDocuments().size();
                    docSize = size;
                    System.out.println("Documents size====" + size);

                    if (mImageUrls.size() > 0 && mNames.size() > 0) {
                        mImageUrls.removeAll(mImageUrls);
                        mNames.removeAll(mNames);
                       /* adapter = new BookingAdapter(getApplicationContext(),bookingsList);
                       adapter.notifyDataSetChanged();
*/
                    }
                    if (size == 0) {
                        mImageUrls.removeAll(mImageUrls);
                        mNames.removeAll(mNames);
                        homeadapter.notifyDataSetChanged();
                    }

                    if (mImageUrlsexpected.size() > 0 && mNamesexpected.size() > 0) {
                        mImageUrlsexpected.removeAll(mImageUrlsexpected);
                        mNamesexpected.removeAll(mNamesexpected);
                       /* adapter = new BookingAdapter(getApplicationContext(),bookingsList);
                       adapter.notifyDataSetChanged();
*/
                    }
                    if (size == 0) {
                        mImageUrlsexpected.removeAll(mImageUrlsexpected);
                        mNamesexpected.removeAll(mNamesexpected);
                        homeadapterexpected.notifyDataSetChanged();
                    }

                    for (DocumentSnapshot documentSnapshot : documentSnapshots.getDocuments()) {
                        //  System.out.println("Documents data==="+documentSnapshot.getData().toString());
                        CreateVisitorsList(documentSnapshot);
                    }
                }
            });
        }
    }

    private void GetUserData() {

        socityCode = sharedPreferences.getString("SOC_CODE", null); //sharedPrefManager.getSocityCode();
        FirebaseFirestore db = FirebaseFirestore.getInstance();

        CollectionReference docRef = db.collection(socityCode).document("UserDoc").collection("Sousers");

        docRef.whereEqualTo("Email", sharedPrefManager.getUserEmail()).addSnapshotListener(new EventListener<QuerySnapshot>() {
            //   docRef.addOnCompleteListener(getActivity(),new EventListener<QuerySnapshot>() {
            @Override
            public void onEvent(QuerySnapshot documentSnapshots, FirebaseFirestoreException e) {
                int size = documentSnapshots.getDocuments().size();
                System.out.println("Documents size=" + size);
                for (DocumentSnapshot documentSnapshot : documentSnapshots.getDocuments()) {
                    //System.out.println("Documents data==="+documentSnapshot.getData().toString());
                    SaveUserData(documentSnapshot);
                    UpdateDeviceId();
                    MarkOnline();
                }
            }
        });


    }

    private void UpdateDeviceId() {
        String deviceId = FirebaseInstanceId.getInstance().getToken();
        DocumentReference bookingref = FirebaseFirestore.getInstance().collection(socityCode).document("UserDoc").collection("Sousers").document(user.getDocId());
        bookingref.update("DeviceId", deviceId).addOnCompleteListener(new OnCompleteListener<Void>() {
            @Override
            public void onComplete(@NonNull Task<Void> task) {
                System.out.println("DeviceId Updated");
            }
        });

    }

    private void SaveUserData(DocumentSnapshot documentSnapshot) {
        user = new User();
        user.setFlatNo(documentSnapshot.getString("FlatNumber"));
        user.setMobileNumber(documentSnapshot.getString("MobileNumber"));
        user.setRole(documentSnapshot.getString("Role"));
        user.setFullName(documentSnapshot.getString("Name"));
        user.setDocId(documentSnapshot.getString("DocId"));
        user.setPhoto(documentSnapshot.getString("Photo"));
        SharedPreferences.Editor prefsEditor = sharedPreferences.edit();
        Gson gson = new Gson();
        String json = gson.toJson(user);
        prefsEditor.putString("UserObj", json);
        prefsEditor.commit();
        LoadVisitorsList();
        initRecyclerView();
        SetProfile();

    }

    private void SetProfile() {
        if (user.getPhoto().contains(".jpg")) {

            Picasso.with(mContext)
                    .load(user.getPhoto())
                    .placeholder(android.R.drawable.sym_def_app_icon)
                    .error(R.drawable.customerpic)
                    .into(mProfileImageView);

     /*       Picasso.with(mContext)
                    .load(user.getPhoto())
                    .placeholder(android.R.drawable.sym_def_app_icon)
                    .error(R.drawable.customerpic)
                    .into(backhead);

*/
        } else {
  /*          Bitmap src;
            byte[] decodedString = Base64.decode(user.getPhoto(), Base64.DEFAULT);
            src = BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length);*/


            //mProfileImageView.setImageBitmap(src);
            Glide.with(this)
                    .load(user.getPhoto())
                    .into(mProfileImageView);

            //    Glide.with(this).load(bitmapToByte(src)).asBitmap().into(mProfileImageView);
//            Glide.with(this).load(bitmapToByte(src)).asBitmap().into(backhead);
           /* Picasso.with(mContext)
                    .load(src)
                    .placeholder(android.R.drawable.sym_def_app_icon)
                    .error(R.drawable.customerpic)
                    .into(mProfileImageView);*/
        }
    }

    private byte[] bitmapToByte(Bitmap bitmap) {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
        byte[] byteArray = stream.toByteArray();
        return byteArray;
    }
    public String RemoveSpecialSymbol(String email) {
        Pattern pt = Pattern.compile("[^a-zA-Z0-9]");
        Matcher match = pt.matcher(email);
        while (match.find()) {
            String s = match.group();
            email = email.replaceAll("\\" + s, "");
        }
        return email;
    }

    private void UpdatePendingCount(int count) {

        //count=0;
    }

    public void OpenBookings(View view) {
        Intent intent = new Intent(this, RegisterActivity.class);

        startActivity(intent);
    }

    public void OpenReports(View view) {
        Intent intent = new Intent(this, Reports.class);
        startActivity(intent);

    }

    public void openassistant(View view) {
        Intent intent = new Intent(this, Conversation.class);
        startActivity(intent);
    }

    public void UserProfile(View view) {
        System.out.println("Clicked......................");
        Intent intent = new Intent(this, User_Profile.class);
        startActivity(intent);
    }

    public void testbeakon(View view) {

        Intent intent = new Intent(this, BeaconActivity.class);
        startActivity(intent);
    }

    public void manageVendor(View view) {

        Intent intent = new Intent(this, VendorActivity.class);
        startActivity(intent);
    }

    public void opensettings(View view) {
        Intent intent = new Intent(this, DetectionActivity.class);
        startActivity(intent);
    }

    public void OpenMemberList(View view) {
        Intent intent = new Intent(this, MemberListActivity.class);
        startActivity(intent);
    }

    private void CreateVisitorsList(DocumentSnapshot documentSnapshot) {
        Visitor visitor = new Visitor();
        visitor.setVistorName(documentSnapshot.getString("VistorName"));
        visitor.setVisitorPic(documentSnapshot.getString("VistorPic"));
        visitor.setFlatNo(documentSnapshot.getString("FlatNumber"));
        visitor.setWhomTomeet(documentSnapshot.getString("WhomTomeet"));
        visitor.setVistorMobile(documentSnapshot.getString("VistorMobile"));
        visitor.setVisitNumber(documentSnapshot.getString("VisitNumber"));
        visitor.setDocId(documentSnapshot.getString("DocId"));
        visitor.setVistorInTime(String.valueOf(documentSnapshot.get("VistorInTime")));
        visitor.setVistorOutTime(String.valueOf(documentSnapshot.get("VistorOutTime")));
        visitor.setMobileVeriy(documentSnapshot.getString("MobileVerify"));
        //   visitor.setBookingTime(documentSnapshot.getString("Time"));
       /* bookings.setStatus(documentSnapshot.getString("Status"));
        bookings.setDocumentId(documentSnapshot.getString("DocId"));*/

        // visitorsList.add(visitor);

        /*Collections.sort(visitorsList, new Comparator<Visitor>(){
            public int compare(Visitor v1, Visitor v2) {
                //  return s1.getDistance().compareToIgnoreCase(s2.getDistance());
                //return Double.compare(Double.parseDouble(s1.getDistance()), Double.parseDouble(s2.getDistance()));
                try {
                    d1 = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss", Locale.ENGLISH).parse(v1.getVistorInTime());
                    d2=new SimpleDateFormat("dd-MM-yyyy HH:mm:ss", Locale.ENGLISH).parse(v2.getVistorInTime());

                }catch (Exception e){

                }
                // return Double.compare(), v1.getVistorInTime());

                return d2.compareTo(d1);
            }
        });*/
        String visitorPic = documentSnapshot.getString("VistorPic");
        String name = documentSnapshot.getString("VistorName");
        String expectedFlag = documentSnapshot.getString("VisitorExpected");
        String stat;

        if (!String.valueOf(documentSnapshot.get("VistorOutTime")).equals("")) {
            stat = "O";
        } else {
            stat = "I";
        }


        if (!String.valueOf(documentSnapshot.get("VistorInTime")).equals("") || !String.valueOf(documentSnapshot.get("VistorOutTime")).equals("")) {
            mImageUrls.add(visitorPic);

        }

        mNames.add(name + ":" + stat);

        if (expectedFlag != null && expectedFlag.equals("Y")) {
            mImageUrlsexpected.add(visitorPic);
            stat = "E";
            mNamesexpected.add(name + ":" + stat);
            noticeText.add(" It is brought to your notice that in last 6 weeks, Society has to repair the sewage pipe more four times. Each time, we have found things like garments and eatables stuck in the pipe:" + stat);
        }

        homeadapter.notifyDataSetChanged();
        homeadapterexpected.notifyDataSetChanged();
        newsBoardAdpter.notifyDataSetChanged();

    }
    private ArrayList<String> findUnAskedPermissions(ArrayList<String> wanted) {
        ArrayList<String> result = new ArrayList<String>();

        for (String perm : wanted) {
            if (!hasPermission(perm)) {
                result.add(perm);
            }
        }

        return result;
    }

    private boolean hasPermission(String permission) {
        if (canMakeSmores()) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                return (checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED);
            }
        }
        return true;
    }

    private boolean canMakeSmores() {
        return (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP_MR1);
    }


    @TargetApi(Build.VERSION_CODES.M)
    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {

        switch (requestCode) {

            case ALL_PERMISSIONS_RESULT:
                for (String perms : permissionsToRequest) {
                    if (!hasPermission(perms)) {
                        permissionsRejected.add(perms);
                    }
                }

                if (permissionsRejected.size() > 0) {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                        if (shouldShowRequestPermissionRationale(permissionsRejected.get(0))) {
                            showMessageOKCancel("These permissions are mandatory for the application. Please allow access.",
                                    new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                                                requestPermissions(permissionsRejected.toArray(new String[permissionsRejected.size()]), ALL_PERMISSIONS_RESULT);
                                            }
                                        }
                                    });
                            return;
                        }
                    }

                }

                break;
        }

    }

    private void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) {
        new AlertDialog.Builder(HomeDashboard.this)
                .setMessage(message)
                .setPositiveButton("OK", okListener)
                .setNegativeButton("Cancel", null)
                .create()
                .show();
    }
}

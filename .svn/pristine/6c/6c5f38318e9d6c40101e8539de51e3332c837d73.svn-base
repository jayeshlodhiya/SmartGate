package com.payphi.visitorsregister;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.StrictMode;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.util.Base64;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.EventListener;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreException;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.gson.Gson;
import com.payphi.visitorsregister.model.User;
import com.payphi.visitorsregister.utils.Utils;

import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;


/**
 * A simple {@link Fragment} subclass.
 * Activities that contain this fragment must implement the
 * {@link RegisterFragment.OnFragmentInteractionListener} interface
 * to handle interaction events.
 * Use the {@link RegisterFragment#newInstance} factory method to
 * create an instance of this fragment.
 */
public class RegisterFragment extends Fragment {
    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";
    public final static String AUTH_KEY_FCM = "AIzaSyB28LSaN0BW-iUbQw27ek0fHb4g2yLlaAs";
    public final static String API_URL_FCM = "https://fcm.googleapis.com/fcm/send";
    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;
    private String deviceId;
    private String vName;
    String visitorNumber = "";
    private String vmobileNo;
    private String flatNo;
    private String vinTime;
    private String verifiedBy = " ";
    private String insertedBy;
    private String whomTomeet;
    private String addr = "";
    private String vehi = "";
    private String purpose;
    ImageView vimg;
    TextView verifyNumber;

    String docId = "";
    String imageEncoded;
    private String outTime;
    Random rnd = new Random();
    int PRIVATE_MODE = 0;
    String securitycode = "";
    public ProgressDialog paydialog; // this = YourActivity
    EditText evname, evmobileNo, eflatNo, evinTime, eoutTime, epurpose, ewhom, address, vehicle;
    Button registerbutton, signButton;
    ImageButton camerabutton;
    ImageView verfyIcon;
    String vmStatus = "";
    public static RegisterFragment registerFragment;
    private static final String PREF_NAME = "sosessionPref";
    private OnFragmentInteractionListener mListener;
    String otp = "";
    SharedPreferences sharedPreferences;
    User user;

    public RegisterFragment() {
        // Required empty public constructor
    }

    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment RegisterFragment.
     */
    // TODO: Rename and change types and number of parameters
    public static RegisterFragment newInstance(String param1, String param2) {
        RegisterFragment fragment = new RegisterFragment();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }
    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_register, container, false);

        StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();
        StrictMode.setVmPolicy(builder.build());
        registerFragment = this;
        sharedPreferences = getContext().getSharedPreferences(PREF_NAME, PRIVATE_MODE);
        securitycode = sharedPreferences.getString("SOC_CODE", null);
        paydialog = new ProgressDialog(getContext());
        paydialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
        paydialog.setMessage("Please wait..");
        paydialog.setIndeterminate(true);
        paydialog.setCanceledOnTouchOutside(false);
        evname = (EditText) view.findViewById(R.id.vNameId);
        verifyNumber = (TextView) view.findViewById(R.id.verifyId);
        evmobileNo = (EditText) view.findViewById(R.id.mobileId);
        eflatNo = (EditText) view.findViewById(R.id.flatId);
        evinTime = (EditText) view.findViewById(R.id.inTimeId);
        epurpose = (EditText) view.findViewById(R.id.purposeId);
        ewhom = (EditText) view.findViewById(R.id.whomId);
        address = (EditText) view.findViewById(R.id.addressId);
        vehicle = (EditText) view.findViewById(R.id.vehicalId);

        verfyIcon = (ImageView) view.findViewById(R.id.verifyiconId);
        verfyIcon.setVisibility(View.INVISIBLE);


        //  eoutTime= (EditText) view.findViewById(R.id.outTimeId);

        registerbutton = (Button) view.findViewById(R.id.button_register);
        camerabutton = (ImageButton) view.findViewById(R.id.takePic);
        signButton = (Button) view.findViewById(R.id.button_sign);
        vimg = (ImageView) view.findViewById(R.id.imgId);
        ;
        vmStatus = "N";
        GetUserData();


        registerbutton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ValidateAndRegister();
            }
        });

        camerabutton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                //       count++;
                vName = evname.getText().toString();
                vmobileNo = evmobileNo.getText().toString();
                flatNo = eflatNo.getText().toString();
                String file = vName + flatNo + ".jpg";
                File newfile = new File(file);
                try {
                    newfile.createNewFile();
                } catch (IOException e) {
                }

                Uri outputFileUri = Uri.fromFile(newfile);

                Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                if (cameraIntent.resolveActivity(getActivity().getPackageManager()) != null) {
                    startActivityForResult(cameraIntent, 20);
                }
                //   cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, outputFileUri);

                //  startActivityForResult(cameraIntent, 20);
            }
        });

     /*   vimg.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                //       count++;
                vName= evname.getText().toString();
                vmobileNo= evmobileNo.getText().toString();
                flatNo= eflatNo.getText().toString();
                String file = vName+flatNo+".jpg";
                File newfile = new File(file);
                try {
                    newfile.createNewFile();
                }
                catch (IOException e)
                {
                }

                Uri outputFileUri = Uri.fromFile(newfile);

                Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                if (cameraIntent.resolveActivity(getActivity().getPackageManager()) != null) {
                    startActivityForResult(cameraIntent, 20);
                }
                //   cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, outputFileUri);

                //  startActivityForResult(cameraIntent, 20);
            }
        });*/
        verifyNumber.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                otp = String.valueOf(100000 + rnd.nextInt(900000));

                if (evmobileNo.getText().toString().equals("")) {
                    Toast.makeText(getContext(), "Enter Mobile Number", Toast.LENGTH_LONG).show();
                } else if (evmobileNo.getText().toString().length() < 10) {
                    Toast.makeText(getContext(), "Enter valid Mobile Number", Toast.LENGTH_LONG).show();
                } else {
                    OpenVerficationOptions();

                }

            }
        });

        return view;
    }

    private void OpenVerficationOptions() {
        LayoutInflater factory = LayoutInflater.from(getContext());
        final View deleteDialogView = factory.inflate(R.layout.otp_verification_layout, null);
        final AlertDialog deleteDialog = new AlertDialog.Builder(getContext()).create();
        deleteDialog.setView(deleteDialogView);
        final RelativeLayout optionlayout = (RelativeLayout) deleteDialogView.findViewById(R.id.relativeLayout2);
        final Button vbutton = (Button) deleteDialogView.findViewById(R.id.vButtonId);
        final EditText vEditText = (EditText) deleteDialogView.findViewById(R.id.otpId);
        optionlayout.setVisibility(View.GONE);
        RadioGroup radioGroup = (RadioGroup) deleteDialogView.findViewById(R.id.radioGrpid);
        radioGroup.clearCheck();
        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                RadioButton rb = (RadioButton) group.findViewById(checkedId);

                if (null != rb && checkedId > -1) {
                    //Toast.makeText(getContext(), rb.getTag().toString(), Toast.LENGTH_SHORT).show();
                    String tag = rb.getTag().toString();

                    if (tag.equals("sms")) {
                        optionlayout.setVisibility(View.VISIBLE);

                        String number = evmobileNo.getText().toString();
                        String msg = otp + " is your verification code";
                        Utils.sendSMS(getContext(), number, msg);
                    } else if (tag.equals("phone")) {
                        String number = evmobileNo.getText().toString();
                        CallVisitor(number);
                    }
                }


            }

            ;
        });

        vbutton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (vEditText.getText().toString() != null && !vEditText.getText().toString().equals("")) {
                    String enterotp = vEditText.getText().toString();
                    if (!enterotp.equals(otp)) {
                        Toast.makeText(getContext(), "Otp not matched!!", Toast.LENGTH_LONG).show();
                        return;
                    } else {
                        Toast.makeText(getContext(), "Otp  matched!!", Toast.LENGTH_LONG).show();
                        verifyNumber.setVisibility(View.INVISIBLE);
                        verfyIcon.setVisibility(View.VISIBLE);
                        vmStatus = "V";
                        deleteDialog.dismiss();
                    }
                }
            }
        });
       /* deleteDialogView.findViewById(R.id.shareId).setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                //your business logic
//                Share();
            }
        });*/


        deleteDialog.show();

    }

    private class PhoneCallListener extends PhoneStateListener {

        private boolean isPhoneCalling = false;
        public boolean wasRinging;
        String LOG_TAG = "LOGGING 123";

        @Override
        public void onCallStateChanged(int state, String incomingNumber) {

            switch (state) {
                case TelephonyManager.CALL_STATE_RINGING:
                    Log.i(LOG_TAG, "RINGING");
                    wasRinging = true;
                    break;
                case TelephonyManager.CALL_STATE_OFFHOOK:
                    Log.i(LOG_TAG, "OFFHOOK");

                    if (!wasRinging) {
                        // Start your new activity
                    } else {
                        // Cancel your old activity
                    }

                    // this should be the last piece of code before the break
                    wasRinging = true;
                    break;
                case TelephonyManager.CALL_STATE_IDLE:
                    Log.i(LOG_TAG, "IDLE");
                    // this should be the last piece of code before the break
                    wasRinging = false;
                    break;
            }
            System.out.println("State=" + wasRinging);
        }


    }

    private void CallVisitor(String vistorMobile) {
        PhoneCallListener phoneListener = new PhoneCallListener();
        TelephonyManager telephonyManager = (TelephonyManager) getContext().getSystemService(Context.TELEPHONY_SERVICE);
        telephonyManager.listen(phoneListener,
                PhoneStateListener.LISTEN_CALL_STATE);

        Intent intent = new Intent(Intent.ACTION_CALL);
        intent.setData(Uri.parse("tel:" + vistorMobile));
        if (ActivityCompat.checkSelfPermission(getContext(), android.Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {
            // TODO: Consider calling
            //    ActivityCompat#requestPermissions
            // here to request the missing permissions, and then overriding
            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
            //                                          int[] grantResults)
            // to handle the case where the user grants the permission. See the documentation
            // for ActivityCompat#requestPermissions for more details.
            return;
        }
        startActivityForResult(intent, 3);
    }


    public static RegisterFragment getInstance() {
        return registerFragment;
    }

    public void setData(String data) {
        System.out.println("Data fragment.." + data);
        String arr[] = data.split(",");
        evname.setText(arr[0]);
        evmobileNo.setText(arr[1]);
        eflatNo.setText(arr[2]);
        epurpose.setText(arr[3]);
        ewhom.setText(arr[4]);


    }

    private void GetUserData() {
        SharedPreferences.Editor prefsEditor = sharedPreferences.edit();
        Gson gson = new Gson();
        String json = sharedPreferences.getString("UserObj", "");
        user = gson.fromJson(json, User.class);
    }


    public void onActivityResult(int requestCode, int resultCode, Intent data) {

        //  System.out.println("Inside Fragment"+requestCode);
        //     System.out.println("Inside Fragment resultCode"+resultCode);
        if (requestCode == 20) {
            try {


                Bundle extras = data.getExtras();
                Bitmap imageBitmap = (Bitmap) extras.get("data");
                if (imageBitmap != null) {
                    camerabutton.setVisibility(View.GONE);
                }
                vimg.setImageBitmap(imageBitmap);
                encodeBitmapAndSaveToFirebase(imageBitmap);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (requestCode == 3) {

            // System.out.println(data.getExtras().toString());
            // Toast.makeText(getContext(),String.valueOf(resultCode),Toast.LENGTH_LONG).show();
        }


        // In fragment class callback
    }

    public void encodeBitmapAndSaveToFirebase(Bitmap bitmap) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
        imageEncoded = Base64.encodeToString(baos.toByteArray(), Base64.DEFAULT);
        System.out.println("Image string==" + imageEncoded);
    }

    private String encodeImage(Bitmap bm) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bm.compress(Bitmap.CompressFormat.JPEG, 100, baos);
        byte[] b = baos.toByteArray();
        String encImage = Base64.encodeToString(b, Base64.DEFAULT);

        return encImage;
    }

    private void ValidateAndRegister() {

        if (evname.getText().toString().equals("")) {
            Toast.makeText(getContext(), "Enter Visitor name", Toast.LENGTH_LONG).show();
            return;
        } else if (evmobileNo.getText().toString().equals("")) {
            Toast.makeText(getContext(), "Enter Mobile Number", Toast.LENGTH_LONG).show();
            return;
        } else if (evmobileNo.getText().toString().length() != 10) {
            Toast.makeText(getContext(), "Enter valid Mobile Number", Toast.LENGTH_LONG).show();
            return;
        } else if (eflatNo.getText().toString().equals("")) {
            flatNo = eflatNo.getText().toString();
            Toast.makeText(getContext(), "Enter Flat Number", Toast.LENGTH_LONG).show();
            return;
        }/*else if(evinTime.getText().toString().equals("")) {
            Toast.makeText(getContext(), "Enter In Time ", Toast.LENGTH_LONG).show();
        }*/ else if (ewhom.getText().toString().equals("")) {
            Toast.makeText(getContext(), "Enter to whom you want to meet ", Toast.LENGTH_LONG).show();
            return;
        } else if (epurpose.getText().toString().equals("")) {
            Toast.makeText(getContext(), "Enter purpose ", Toast.LENGTH_LONG).show();
            return;
        } else if (address.getText().toString().equals("")) {
            Toast.makeText(getContext(), "Enter Address", Toast.LENGTH_LONG).show();

            return;
        } else if (imageEncoded == null || imageEncoded.equals("")) {
            Toast.makeText(getContext(), "Please take Pic", Toast.LENGTH_LONG).show();
            return;
        } else {
            vName = evname.getText().toString();
            vmobileNo = evmobileNo.getText().toString();
            flatNo = eflatNo.getText().toString();
            vinTime = evinTime.getText().toString();
            whomTomeet = ewhom.getText().toString();
            purpose = epurpose.getText().toString();
            addr = address.getText().toString();
            if (vehicle.getText().toString() != null && !vehicle.getText().toString().equals("")) {
                vehi = vehicle.getText().toString();
            }

            Register();

        }


    }

    private void Register() {
        Map<String, Object> visitorMap;
        sharedPreferences = getContext().getSharedPreferences(PREF_NAME, PRIVATE_MODE);

        DocumentReference bookingref = FirebaseFirestore.getInstance().collection(securitycode).document("Visitors").collection("SVisitors").document();
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
        DateFormat onlydate = new SimpleDateFormat("dd-MM-yyyy");
        Date date = new Date();
        visitorMap = new HashMap<String, Object>();
        visitorNumber = String.valueOf(100000 + rnd.nextInt(900000));
        visitorNumber = visitorNumber + "-" + flatNo;

        GPSTracker gps;
        gps = new GPSTracker(getContext());
        String currentLoction = "";
        if (gps.canGetLocation()) {

            double latitude = gps.getLatitude();
            double longitude = gps.getLongitude();
            currentLoction = String.valueOf(latitude + "," + longitude);
        }
        visitorMap.put("VistorName", vName);
        visitorMap.put("VistorMobile", vmobileNo);
        visitorMap.put("FlatNumber", flatNo);
        visitorMap.put("VistorInTime", String.valueOf(dateFormat.format(date)));
        visitorMap.put("Date", String.valueOf(onlydate.format(date)));
        visitorMap.put("VistorOutTime", "");
        visitorMap.put("VistorSign", "");
        visitorMap.put("VistorAdrr", addr);
        visitorMap.put("VistorVehicleNo", vehi);
        visitorMap.put("VistorPic", imageEncoded);
        visitorMap.put("VistorVerfiedBy", verifiedBy);
        visitorMap.put("MobileVerify", vmStatus);
        visitorMap.put("VistorInsertedBy", sharedPreferences.getString("NAME", null));
        visitorMap.put("WhomTomeet", whomTomeet);
        visitorMap.put("Purpose", purpose);
        visitorMap.put("VisitNumber", visitorNumber);
        visitorMap.put("VisitorLocation", currentLoction);

        docId = bookingref.getId();
        visitorMap.put("DocId", docId);

        paydialog.show();
        bookingref.set(visitorMap).addOnSuccessListener(new OnSuccessListener<Void>() {
            @Override
            public void onSuccess(Void aVoid) {
                Toast.makeText(getContext(), "Registration done!!", Toast.LENGTH_LONG).show();
                ClearData();
                TakeDeviceIdByFlatNoOrName();
                //getImageStringFromVisitNumber(docId);
                paydialog.dismiss();

                //LocalNotification();
                // SendNotificationToShop();
            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception e) {
                Toast.makeText(getContext(), "Error Occured.!", Toast.LENGTH_LONG).show();
                paydialog.dismiss();

            }
        });


    }

    private void ClearData() {
        if (!evname.getText().toString().equals("")) {
            evname.setText("");
        }
        if (!evmobileNo.getText().toString().equals("")) {
            evmobileNo.setText("");
        }
        if (!eflatNo.getText().toString().equals("")) {
            eflatNo.setText("");
        }
        if (!evinTime.getText().toString().equals("")) {
            evinTime.setText("");
        }

        if (!epurpose.getText().toString().equals("")) {
            epurpose.setText("");
        }
        if (!ewhom.getText().toString().equals("")) {
            ewhom.setText("");
        }
        if (!address.getText().toString().equals("")) {
            address.setText("");
        }
        if (!vehicle.getText().toString().equals("")) {
            vehicle.setText("");
        }
        camerabutton.setVisibility(View.VISIBLE);
        vimg.setVisibility(View.INVISIBLE);
        verifyNumber.setVisibility(View.VISIBLE);
        verfyIcon.setVisibility(View.INVISIBLE);

        imageEncoded = "";

    }

    private void TakeDeviceIdByFlatNoOrName() {
        FirebaseFirestore db = FirebaseFirestore.getInstance();
        CollectionReference docRef = db.collection(securitycode).document("UserDoc").collection("Sousers");

        docRef.whereEqualTo("FlatNumber", flatNo).addSnapshotListener(new EventListener<QuerySnapshot>() {
            //   docRef.addOnCompleteListener(getActivity(),new EventListener<QuerySnapshot>() {
            @Override
            public void onEvent(QuerySnapshot documentSnapshots, FirebaseFirestoreException e) {
                int size = documentSnapshots.getDocuments().size();

                System.out.println("Documents notification size=" + size);


                for (DocumentSnapshot documentSnapshot : documentSnapshots.getDocuments()) {
                    //System.out.println("Documents data==="+documentSnapshot.getData().toString());
                    SendNotification(documentSnapshot);
                }
            }
        });
        paydialog.dismiss();

    }

    private void SendNotification(DocumentSnapshot snapshot) {
        deviceId = snapshot.getString("DeviceId");
        myAsyncTask myAsyncTask = (RegisterFragment.myAsyncTask) new myAsyncTask().execute(deviceId);
    }

    private class myAsyncTask extends AsyncTask<String, Void, Void> {

        @Override
        protected Void doInBackground(String... pParams) {
            String deviceId = pParams[0];
            //      System.out.println("DeviceId="+deviceId);
            //
            String authKey = AUTH_KEY_FCM; // You FCM AUTH key
            String FMCurl = API_URL_FCM;
            try {
                URL url = new URL(FMCurl);
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();

                conn.setUseCaches(false);
                conn.setDoInput(true);
                conn.setDoOutput(true);

                conn.setRequestMethod("POST");
                conn.setRequestProperty("Authorization", "key=" + authKey);
                conn.setRequestProperty("Content-Type", "application/json");

                JSONObject json = new JSONObject();
                json.put("to", deviceId.trim());
                JSONObject payload = new JSONObject();
                JSONObject info = new JSONObject();
                info.put("title", "Booking "); // Notification title
                info.put("sound", "default");
                info.put("body", vName + " is at security gate for " + purpose); // Notification body
                info.put("docId", docId);
                info.put("Scode", securitycode);
                //payload.put("payloaddata",info);
                json.put("data", info);
                // json.put("notification", info);


                OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                wr.write(json.toString());
                wr.flush();
                conn.getInputStream();

            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
    }

    // TODO: Rename method, update argument and hook method into UI event
    public void onButtonPressed(Uri uri) {
        if (mListener != null) {
            mListener.onFragmentInteraction(uri);
        }
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
/*        if (context instanceof OnFragmentInteractionListener) {
            mListener = (OnFragmentInteractionListener) context;
        } else {
            throw new RuntimeException(context.toString()
                    + " must implement OnFragmentInteractionListener");
        }*/
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mListener = null;
    }

    /**
     * This interface must be implemented by activities that contain this
     * fragment to allow an interaction in this fragment to be communicated
     * to the activity and potentially other fragments contained in that
     * activity.
     * <p/>
     * See the Android Training lesson <a href=
     * "http://developer.android.com/training/basics/fragments/communicating.html"
     * >Communicating with Other Fragments</a> for more information.
     */
    public interface OnFragmentInteractionListener {
        // TODO: Update argument type and name
        void onFragmentInteraction(Uri uri);
    }

    @Override
    public void onResume() {
        super.onResume();
        System.out.println("In Resume");
    }
}

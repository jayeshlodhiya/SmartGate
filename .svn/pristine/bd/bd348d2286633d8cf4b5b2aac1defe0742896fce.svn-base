package com.payphi.visitorsregister.FirebaseNotification;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.support.v4.app.NotificationCompat;
import android.support.v4.content.LocalBroadcastManager;
import android.text.TextUtils;
import android.text.format.DateUtils;
import android.util.Base64;
import android.util.Log;
import android.widget.RemoteViews;

import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.EventListener;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreException;
import com.google.firebase.messaging.FirebaseMessagingService;
import com.google.firebase.messaging.RemoteMessage;
import com.payphi.visitorsregister.Calling;
import com.payphi.visitorsregister.MainActivity;
import com.payphi.visitorsregister.R;
import com.payphi.visitorsregister.utils.TTS;

import org.json.JSONException;
import org.json.JSONObject;

/**
 * Created by swapnil.g on 6/10/2017.
 */


/**
 * Created by Ravi Tamada on 08/08/16.
 * www.androidhive.info
 */
public class MyFirebaseMessagingService extends FirebaseMessagingService {

    private static final String TAG = MyFirebaseMessagingService.class.getSimpleName();

    private NotificationUtils notificationUtils;
    String body = "";
    String sound;
    String imageStringFromVisitNumber = "";
    private String googlemaplogo="



    private String base64String = "";

    @Override
    public void onMessageReceived(RemoteMessage remoteMessage) {
        Log.e(TAG, "From: " + remoteMessage.getFrom());

        if (remoteMessage == null)
            return;

        // Check if message contains a notification payload.
        if (remoteMessage.getNotification() != null) {
            Log.e(TAG, "Notification Body: " + remoteMessage.getNotification().getBody());
            handleNotification(remoteMessage.getNotification().getBody());
            //      sendNotification(remoteMessage.getNotification().getBody());
            //   NotificationUtils notificationUtils = new NotificationUtils(getApplicationContext());
            //  notificationUtils.showSmallNotification(getPackageName(),remoteMessage.getNotification().getBody(),);

        }

        // Check if message contains a data payload.
        if (remoteMessage.getData().size() > 0) {
            Log.e(TAG, "Data Payload: " + remoteMessage.getData().toString());
            Log.e(TAG, "Data Payload body: " + remoteMessage.getData().get("body"));

            try {
//                JSONObject json = new JSONObject(remoteMessage.getData().toString());

                //       handleDataMessage(json);
                //  NotificationUtils notificationUtils = new NotificationUtils(getApplicationContext());
                // notificationUtils.showSmallNotification(getPackageName(),"jjjjj test gg");

                /*Notification notification = new NotificationCompat.Builder(this)
                        .setContentTitle(remoteMessage.getData().get("title"))
                        .setContentText(remoteMessage.getData().get("body"))
                        .setSmallIcon(R.mipmap.ic_launcher)
                        .build();
                NotificationManagerCompat manager = NotificationManagerCompat.from(getApplicationContext());
                manager.notify(123, notification);*/
                TTS.init(getApplicationContext());
                body = remoteMessage.getData().get("body");
                if (remoteMessage.getData().containsKey("docId")) {
                    String docId = remoteMessage.getData().get("docId");
                    if (docId != null && !docId.equals("")) {
                        String socityCode = remoteMessage.getData().get("Scode");
                        getImageStringFromDocNumber(docId, socityCode);
                    }
                    sound = remoteMessage.getData().get("sound");
                } else {
                    sound = remoteMessage.getData().get("sound");
                    String location = remoteMessage.getData().get("location");
                    if(location!=null){
                        imageStringFromVisitNumber = googlemaplogo;
                    }
                    sendNotify(location);
                }

            } catch (Exception e) {
                e.printStackTrace();
                //Log.e(TAG, "Exception: " + e.getMessage());
                /*Notification notification = new NotificationCompat.Builder(this)
                        .setContentTitle("eeeeeeeee")
                        .setContentText("exeption")
                        .setSmallIcon(R.mipmap.ic_launcher)
                        .build();
                NotificationManagerCompat manager = NotificationManagerCompat.from(getApplicationContext());
                manager.notify(123, notification);*/


            }
        }
    }

    public void sendNotify(String role) {

        Log.e(TAG, "Data image service: " + imageStringFromVisitNumber);
        Bitmap bitmap = getBitmapFromBase64(imageStringFromVisitNumber);
        NotificationUtils notificationUtils = new NotificationUtils(getApplicationContext());
        notificationUtils.showSmallNotification(getPackageName(), body, bitmap, role, sound);

    }

    public Bitmap getBitmapFromBase64(String img) {
        Bitmap src;
        byte[] decodedString = Base64.decode(img, Base64.DEFAULT);
        src = BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length);
        return src;
    }

    private void handleNotification(String message) {
        if (!NotificationUtils.isAppIsInBackground(getApplicationContext())) {
            // app is in foreground, broadcast the push message
            Intent pushNotification = new Intent(Config.PUSH_NOTIFICATION);
            pushNotification.putExtra("message", message);
            LocalBroadcastManager.getInstance(this).sendBroadcast(pushNotification);


            // play notification sound
            NotificationUtils notificationUtils = new NotificationUtils(getApplicationContext());
            String title = "Booking12";
            String timestamp = "";

            // play notification sound
            showNotificationMessage(getApplicationContext(), title, message, timestamp, pushNotification);
            notificationUtils.playNotificationSound();
        } else {
            Intent pushNotification = new Intent(Config.PUSH_NOTIFICATION);
            pushNotification.putExtra("message", message);
            LocalBroadcastManager.getInstance(this).sendBroadcast(pushNotification);


            // play notification sound
            NotificationUtils notificationUtils = new NotificationUtils(getApplicationContext());
            String title = "Booking23";
            String timestamp = "";

            // play notification sound
            showNotificationMessage(getApplicationContext(), title, message, timestamp, pushNotification);
            notificationUtils.playNotificationSound();
            // If the app is in background, firebase itself handles the notification
        }
    }

    private void handleDataMessage(JSONObject json) {
        Log.e(TAG, "push json: " + json.toString());

        try {
            JSONObject data = json.getJSONObject("data");

            String title = data.getString("title");
            String message = data.getString("message");
            boolean isBackground = data.getBoolean("is_background");
            String imageUrl = data.getString("image");
            String timestamp = data.getString("timestamp");
            JSONObject payload = data.getJSONObject("payload");

            Log.e(TAG, "title: " + title);
            Log.e(TAG, "message: " + message);
            Log.e(TAG, "isBackground: " + isBackground);
            Log.e(TAG, "payload: " + payload.toString());
            Log.e(TAG, "imageUrl: " + imageUrl);
            Log.e(TAG, "timestamp: " + timestamp);


            if (!NotificationUtils.isAppIsInBackground(getApplicationContext())) {
                // app is in foreground, broadcast the push message
                Intent resultIntent = new Intent(getApplicationContext(), MainActivity.class);
                resultIntent.putExtra("message", message);
                Intent pushNotification = new Intent(Config.PUSH_NOTIFICATION);
                pushNotification.putExtra("message", message);
                LocalBroadcastManager.getInstance(this).sendBroadcast(pushNotification);

                // play notification sound
                NotificationUtils notificationUtils = new NotificationUtils(getApplicationContext());
                showNotificationMessage(getApplicationContext(), title, message, timestamp, resultIntent);
                notificationUtils.playNotificationSound();
            } else {
                // app is in background, show the notification in notification tray
                Intent resultIntent = new Intent(getApplicationContext(), MainActivity.class);
                resultIntent.putExtra("message", message);
                notificationUtils.playNotificationSound();
                // check for image attachment
                if (TextUtils.isEmpty(imageUrl)) {
                    showNotificationMessage(getApplicationContext(), title, message, timestamp, resultIntent);
                } else {
                    // image is present, show notification with image
                    showNotificationMessageWithBigImage(getApplicationContext(), title, message, timestamp, resultIntent, imageUrl);
                }
            }
        } catch (JSONException e) {
            Log.e(TAG, "Json Exception: " + e.getMessage());
        } catch (Exception e) {
            Log.e(TAG, "Exception: " + e.getMessage());
        }
    }

    /**
     * Showing notification with text only
     */
    private void showNotificationMessage(Context context, String title, String message, String timeStamp, Intent intent) {
        notificationUtils = new NotificationUtils(context);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        notificationUtils.showNotificationMessage(title, message, timeStamp, intent, getPackageName(), getApplicationContext());
    }

    /**
     * Showing notification with text and image
     */
    private void showNotificationMessageWithBigImage(Context context, String title, String message, String timeStamp, Intent intent, String imageUrl) {
        notificationUtils = new NotificationUtils(context);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        //  notificationUtils.showNotificationMessage(title, message, timeStamp, intent, imageUrl,getPackageName(),context);
    }


    private void sendNotification(String message) {

        RemoteViews expandedView = new RemoteViews(getPackageName(), R.layout.view_expanded_notification);
        expandedView.setTextViewText(R.id.timestamp, DateUtils.formatDateTime(this, System.currentTimeMillis(), DateUtils.FORMAT_SHOW_TIME));
        expandedView.setTextViewText(R.id.notification_message, message);
        // adding action to left button
        Intent leftIntent = new Intent(this, Calling.class);
        leftIntent.setAction("left");
        expandedView.setOnClickPendingIntent(R.id.left_button, PendingIntent.getService(this, 0, leftIntent, PendingIntent.FLAG_UPDATE_CURRENT));
        // adding action to right button
        Intent rightIntent = new Intent(this, Calling.class);
        rightIntent.setAction("right");
        expandedView.setOnClickPendingIntent(R.id.right_button, PendingIntent.getService(this, 1, rightIntent, PendingIntent.FLAG_UPDATE_CURRENT));

        RemoteViews collapsedView = new RemoteViews(getPackageName(), R.layout.view_collapsed_notification);
        collapsedView.setTextViewText(R.id.timestamp, DateUtils.formatDateTime(this, System.currentTimeMillis(), DateUtils.FORMAT_SHOW_TIME));

        NotificationCompat.Builder builder = new NotificationCompat.Builder(this)
                // these are the three things a NotificationCompat.Builder object requires at a minimum
                .setSmallIcon(R.drawable.ic_menu_manage)
                .setContentTitle("Alert")
                .setContentText(message)
                // notification will be dismissed when tapped
                .setAutoCancel(true)
                // tapping notification will open MainActivity
                .setContentIntent(PendingIntent.getActivity(this, 0, new Intent(this, MainActivity.class), 0))
                // setting the custom collapsed and expanded views
                .setCustomContentView(collapsedView)
                .setCustomBigContentView(expandedView)
                // setting style to DecoratedCustomViewStyle() is necessary for custom views to display
                .setStyle(new android.support.v7.app.NotificationCompat.DecoratedCustomViewStyle());
        Notification notification;
        notification = builder.mNotification;

        // retrieves android.app.NotificationManager
        NotificationManager notificationManager = (android.app.NotificationManager) getSystemService(NOTIFICATION_SERVICE);
        notificationManager.notify(0, builder.build());

    }

    public String getImageStringFromDocNumber(String docId, String code) {

        CollectionReference collectionReference = FirebaseFirestore.getInstance().collection(code).document("Visitors").collection("SVisitors");
        collectionReference.document(docId).addSnapshotListener(new EventListener<DocumentSnapshot>() {

            @Override
            public void onEvent(DocumentSnapshot snapshot, FirebaseFirestoreException e) {
                //        System.out.println("Documents data service==="+snapshot.getData().toString());
                imageStringFromVisitNumber = snapshot.getString("VistorPic");
//                    System.out.println("Image1===="+imageStringFromVisitNumber);
                sendNotify(null);
            }


        });


        return imageStringFromVisitNumber;
    }
}